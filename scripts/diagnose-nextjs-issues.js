import fs from "fs";
import path from "path";
import { execSync } from "child_process";

console.log("=== Diagnostic Approfondi de l'Application Next.js ===");

const projectRoot = path.resolve(__dirname, "..");
const results = {
  configs: [],
  cssFiles: [],
  permissions: [],
  packageInfo: null,
  conflicts: [],
};

// Fonction pour analyser le contenu d'un fichier
function analyzeFile(filePath, patterns) {
  try {
    const content = fs.readFileSync(filePath, "utf8");
    const matches = {};

    for (const [key, pattern] of Object.entries(patterns)) {
      const regex = new RegExp(pattern, "g");
      matches[key] = (content.match(regex) || []).length;
    }

    return { path: filePath, matches };
  } catch (error) {
    return { path: filePath, error: error.message };
  }
}

// 1. Analyser les fichiers de configuration
console.log("\n1. Analyse des fichiers de configuration...");

const configFiles = [
  "next.config.js",
  "next.config.mjs",
  "postcss.config.js",
  "postcss.config.cjs",
  "tailwind.config.js",
  "tailwind.config.ts",
  ".storybook/postcss.config.js",
];

for (const configFile of configFiles) {
  const configPath = path.join(projectRoot, configFile);
  if (fs.existsSync(configPath)) {
    try {
      const content = fs.readFileSync(configPath, "utf8");
      results.configs.push({
        path: configFile,
        exists: true,
        size: content.length,
        content:
          content.substring(0, 200) + (content.length > 200 ? "..." : ""),
      });
    } catch (error) {
      results.configs.push({
        path: configFile,
        exists: true,
        error: error.message,
      });
    }
  } else {
    results.configs.push({ path: configFile, exists: false });
  }
}

// 2. V√©rifier les fichiers CSS
console.log("2. Analyse des fichiers CSS globaux...");

const cssFiles = ["src/app/globals.css", "src/styles/globals.css"];

for (const cssFile of cssFiles) {
  const cssPath = path.join(projectRoot, cssFile);
  if (fs.existsSync(cssPath)) {
    try {
      const content = fs.readFileSync(cssPath, "utf8");
      const patterns = {
        tailwindDirectives: "@tailwind",
        layerDirectives: "@layer",
        cssVariables: "--[a-z-]+:",
        cssImports: "@import",
      };

      const analyzed = analyzeFile(cssPath, patterns);
      results.cssFiles.push({
        path: cssFile,
        exists: true,
        size: content.length,
        analysis: analyzed.matches,
        firstLines: content.split("\n").slice(0, 5).join("\n"),
      });
    } catch (error) {
      results.cssFiles.push({
        path: cssFile,
        exists: true,
        error: error.message,
      });
    }
  } else {
    results.cssFiles.push({ path: cssFile, exists: false });
  }
}

// 3. V√©rifier l'importation de CSS dans layout.tsx
console.log("3. V√©rification des imports dans layout.tsx...");

const layoutPath = path.join(projectRoot, "src", "app", "layout.tsx");
if (fs.existsSync(layoutPath)) {
  try {
    const content = fs.readFileSync(layoutPath, "utf8");
    const hasGlobalsCssImport = content.includes("import './globals.css'");
    const hasOtherCssImport = content.match(/import ['"](.+)\.css['"]/g);

    results.layout = {
      exists: true,
      importsGlobalsCss: hasGlobalsCssImport,
      otherCssImports: hasOtherCssImport,
    };
  } catch (error) {
    results.layout = { exists: true, error: error.message };
  }
} else {
  results.layout = { exists: false };
}

// 4. V√©rifier les permissions sur les dossiers cl√©s
console.log("4. V√©rification des permissions sur les dossiers...");

const dirsToCheck = [".next", ".next/cache", "node_modules"];

for (const dir of dirsToCheck) {
  const dirPath = path.join(projectRoot, dir);
  try {
    if (fs.existsSync(dirPath)) {
      // V√©rifier les permissions
      try {
        fs.accessSync(dirPath, fs.constants.R_OK | fs.constants.W_OK);
        results.permissions.push({
          path: dir,
          exists: true,
          readable: true,
          writable: true,
        });
      } catch (error) {
        results.permissions.push({
          path: dir,
          exists: true,
          readable: false,
          writable: false,
          error: error.message,
        });
      }
    } else {
      results.permissions.push({ path: dir, exists: false });
    }
  } catch (error) {
    results.permissions.push({
      path: dir,
      error: error.message,
    });
  }
}

// 5. Analyser package.json pour les d√©pendances
console.log("5. Analyse de package.json...");

const packagePath = path.join(projectRoot, "package.json");
try {
  if (fs.existsSync(packagePath)) {
    const packageContent = fs.readFileSync(packagePath, "utf8");
    const packageJson = JSON.parse(packageContent);

    results.packageInfo = {
      nextVersion:
        packageJson.dependencies?.next ||
        packageJson.devDependencies?.next ||
        "non trouv√©",
      tailwindVersion:
        packageJson.dependencies?.tailwindcss ||
        packageJson.devDependencies?.tailwindcss ||
        "non trouv√©",
      postcssVersion:
        packageJson.dependencies?.postcss ||
        packageJson.devDependencies?.postcss ||
        "non trouv√©",
      hasTypography:
        !!packageJson.dependencies?.["@tailwindcss/typography"] ||
        !!packageJson.devDependencies?.["@tailwindcss/typography"],
      hasTailwindPostcss:
        !!packageJson.dependencies?.["@tailwindcss/postcss"] ||
        !!packageJson.devDependencies?.["@tailwindcss/postcss"],
    };
  } else {
    results.packageInfo = { error: "package.json introuvable" };
  }
} catch (error) {
  results.packageInfo = { error: error.message };
}

// 6. Recherche de conflits potentiels
console.log("6. Recherche de conflits potentiels...");

// V√©rifier si plusieurs postcss.config existent
if (
  results.configs.filter((c) => c.exists && c.path.includes("postcss.config"))
    .length > 1
) {
  results.conflicts.push("Plusieurs configurations PostCSS d√©tect√©es");
}

// V√©rifier si plusieurs globals.css existent
if (results.cssFiles.filter((c) => c.exists).length > 1) {
  results.conflicts.push("Plusieurs fichiers globals.css d√©tect√©s");
}

// V√©rifier si tailwind.config.js et tailwind.config.ts existent tous les deux
if (
  results.configs.find((c) => c.exists && c.path === "tailwind.config.js") &&
  results.configs.find((c) => c.exists && c.path === "tailwind.config.ts")
) {
  results.conflicts.push("Deux configurations Tailwind (JS et TS) d√©tect√©es");
}

// 7. Afficher les r√©sultats de diagnostic
console.log("\n=== R√©sultats du Diagnostic ===");

console.log("\nüìÇ Fichiers de Configuration:");
results.configs
  .filter((c) => c.exists)
  .forEach((config) => {
    console.log(
      `- ${config.path}: ${config.error ? "ERREUR: " + config.error : "OK"}`
    );
    if (!config.error && config.content) {
      console.log(`  D√©but du contenu: ${config.content}`);
    }
  });

console.log("\nüìÑ Fichiers CSS:");
results.cssFiles
  .filter((c) => c.exists)
  .forEach((css) => {
    console.log(`- ${css.path}: ${css.error ? "ERREUR: " + css.error : "OK"}`);
    if (!css.error) {
      console.log(`  Premi√®res lignes:\n  ${css.firstLines}`);
      if (css.analysis) {
        console.log(
          `  Directives Tailwind: ${css.analysis.tailwindDirectives}`
        );
        console.log(`  Directives @layer: ${css.analysis.layerDirectives}`);
      }
    }
  });

console.log("\nüîç Layout.tsx:");
if (results.layout.exists) {
  console.log(
    `- Import de globals.css: ${
      results.layout.importsGlobalsCss ? "OUI" : "NON"
    }`
  );
  if (results.layout.otherCssImports) {
    console.log(
      `- Autres imports CSS: ${results.layout.otherCssImports.join(", ")}`
    );
  }
}

console.log("\nüì¶ Information Package:");
if (results.packageInfo && !results.packageInfo.error) {
  console.log(`- Version Next.js: ${results.packageInfo.nextVersion}`);
  console.log(`- Version Tailwind: ${results.packageInfo.tailwindVersion}`);
  console.log(`- Version PostCSS: ${results.packageInfo.postcssVersion}`);
  console.log(
    `- Plugin Typography: ${results.packageInfo.hasTypography ? "OUI" : "NON"}`
  );
  console.log(
    `- @tailwindcss/postcss: ${
      results.packageInfo.hasTailwindPostcss ? "OUI" : "NON"
    }`
  );
}

console.log("\n‚ö†Ô∏è Conflits D√©tect√©s:");
if (results.conflicts.length > 0) {
  results.conflicts.forEach((conflict) => console.log(`- ${conflict}`));
} else {
  console.log("- Aucun conflit d√©tect√©");
}

// 8. Recommandations
console.log("\nüîß Recommandations:");

// Si @tailwindcss/postcss est install√© mais que la config utilise tailwindcss, sugg√©rer un changement
if (
  results.packageInfo?.hasTailwindPostcss &&
  results.configs.find(
    (c) =>
      c.exists &&
      c.path === "postcss.config.js" &&
      c.content.includes("tailwindcss:")
  )
) {
  console.log(
    "1. Votre configuration PostCSS utilise 'tailwindcss' alors que vous avez '@tailwindcss/postcss' install√©."
  );
  console.log(
    "   Modifiez postcss.config.js pour utiliser '@tailwindcss/postcss' √† la place."
  );
}

// Si plusieurs fichiers globals.css existent, sugg√©rer une consolidation
if (results.cssFiles.filter((c) => c.exists).length > 1) {
  console.log(
    "2. Vous avez plusieurs fichiers globals.css. Consolidez-les en un seul fichier dans src/app/globals.css."
  );
}

// Si plusieurs configurations Tailwind existent, sugg√©rer de n'en garder qu'une
if (
  results.configs.find((c) => c.exists && c.path === "tailwind.config.js") &&
  results.configs.find((c) => c.exists && c.path === "tailwind.config.ts")
) {
  console.log(
    "3. Vous avez deux configurations Tailwind (JS et TS). Gardez uniquement tailwind.config.js."
  );
}

// V√©rifier si le dossier .next a des probl√®mes de permission
const nextDirIssue = results.permissions.find(
  (p) => p.path === ".next" && p.exists && (!p.readable || !p.writable)
);
if (nextDirIssue) {
  console.log(
    "4. Le dossier .next a des probl√®mes de permissions. Supprimez-le et laissez Next.js le recr√©er."
  );
}

// 9. Solution recommand√©e
console.log("\nüìã Solution Recommand√©e:");
console.log(`
1. Arr√™tez tous les processus Node.js en cours
2. Supprimez le dossier .next (rm -rf .next)
3. Cr√©ez un fichier postcss.config.js simple:

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  }
};

4. Assurez-vous que globals.css est bien import√© dans src/app/layout.tsx
5. Assurez-vous que vous n'avez qu'un seul fichier tailwind.config.js
6. Red√©marrez votre application: npm run dev
`);

// 10. V√©rification des probl√®mes avec les param√®tres de route dynamique
console.log(
  "\n10. V√©rification des probl√®mes de params dans les routes dynamiques..."
);

function findDynamicRouteFiles(directory) {
  const dynamicRouteFiles = [];

  function scanDirectory(dir) {
    const items = fs.readdirSync(dir);

    for (const item of items) {
      const fullPath = path.join(dir, item);
      const stats = fs.statSync(fullPath);

      if (stats.isDirectory()) {
        if (item.startsWith("[") && item.endsWith("]")) {
          // C'est un dossier de route dynamique
          const pageFiles = ["page.tsx", "page.jsx", "page.js"].map((file) =>
            path.join(fullPath, file)
          );
          const existingPageFile = pageFiles.find((file) =>
            fs.existsSync(file)
          );

          if (existingPageFile) {
            dynamicRouteFiles.push(existingPageFile);
          }
        }
        // Continuer √† scanner r√©cursivement
        scanDirectory(fullPath);
      }
    }
  }

  scanDirectory(directory);
  return dynamicRouteFiles;
}

function fixParamsUsageInFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, "utf8");
    let modified = false;

    // Rechercher l'utilisation directe de params.X sans await
    const directParamsUsageRegex = /const\s*{([^}]+)}\s*=\s*params/g;
    if (directParamsUsageRegex.test(content)) {
      console.log(
        `  - Trouv√© utilisation directe de params dans ${path.relative(
          projectRoot,
          filePath
        )}`
      );

      // Remplacer tous les usages directs de params par des versions avec await
      content = content.replace(directParamsUsageRegex, (match, paramsList) => {
        const params = paramsList.split(",").map((p) => p.trim());
        const awaitedParams = params
          .map((p) => {
            return `const ${p} = await params.${p};`;
          })
          .join("\n  ");

        modified = true;
        return `// D√©structuration des param√®tres de route avec await\n  ${awaitedParams}`;
      });

      // Remplacer √©galement les utilisations directes dans les fonctions
      const paramsAccessRegex = /params\.([\w]+)/g;
      const foundParams = new Set();
      let execResult;
      while ((execResult = paramsAccessRegex.exec(content)) !== null) {
        foundParams.add(execResult[1]);
      }

      if (foundParams.size > 0) {
        console.log(
          `  - Trouv√© ${
            foundParams.size
          } acc√®s directs aux param√®tres: ${Array.from(foundParams).join(", ")}`
        );
      }
    }

    // √âcrire le fichier modifi√©
    if (modified) {
      fs.writeFileSync(filePath, content);
      console.log(
        `  ‚úÖ Fichier modifi√©: ${path.relative(projectRoot, filePath)}`
      );
      return true;
    }

    return false;
  } catch (error) {
    console.error(
      `  ‚ùå Erreur lors de la modification du fichier ${filePath}:`,
      error
    );
    return false;
  }
}

const appDirectory = path.join(projectRoot, "src", "app");
if (fs.existsSync(appDirectory)) {
  console.log("Recherche des fichiers de routes dynamiques...");
  const dynamicRouteFiles = findDynamicRouteFiles(appDirectory);
  console.log(
    `Trouv√© ${dynamicRouteFiles.length} fichiers de routes dynamiques.`
  );

  let fixedFiles = 0;
  for (const file of dynamicRouteFiles) {
    const relativePath = path.relative(projectRoot, file);
    console.log(`\nAnalyse de ${relativePath}...`);
    if (fixParamsUsageInFile(file)) {
      fixedFiles++;
    }
  }

  console.log(
    `\n${fixedFiles} fichiers ont √©t√© corrig√©s pour l'utilisation correcte de params.`
  );

  // Afficher les instructions pour corriger les erreurs manuellement
  console.log("\nüìã Correction manuelle des probl√®mes de params:");
  console.log(`
Pour corriger les erreurs de "params should be awaited", modifiez vos fichiers page.tsx comme suit:

// Au lieu de:
const { moduleId, lessonId } = params;

// Utilisez:
const moduleId = await params.moduleId;
const lessonId = await params.lessonId;

// Et modifiez toutes les utilisations de params.X en attente pr√©alable:
const module = await getModule(await params.moduleId);
`);
}

// 11. V√©rification des probl√®mes d'hooks React
console.log("\n11. V√©rification des probl√®mes d'hooks React...");
console.log(`
Les erreurs de hooks peuvent √™tre caus√©es par:
1. Des versions incompatibles de React et React DOM
2. Utilisation de hooks en dehors d'un composant de fonction
3. Multiple copies de React dans le projet

Suggestions:
1. V√©rifiez vos versions React: ${
  results.packageInfo?.reactVersion || "Non trouv√©e"
}
2. Assurez-vous d'utiliser "use client" pour les composants utilisant des hooks
3. N'utilisez pas de hooks dans les fichiers de serveur qui ne sont pas marqu√©s 'use client'
4. Placez les hooks en haut de vos composants, pas dans des conditions
`);

// Sauvegarde des r√©sultats pour r√©f√©rence
fs.writeFileSync(
  path.join(__dirname, "diagnostic-results.json"),
  JSON.stringify(results, null, 2)
);

console.log(
  "\nR√©sultats d√©taill√©s sauvegard√©s dans scripts/diagnostic-results.json"
);
