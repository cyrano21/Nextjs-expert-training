// üìÑ src/middleware.ts

import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export default async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  // V√©rifier si on acc√®de √† une page prot√©g√©e
  const isProtectedRoute = 
    pathname.startsWith('/student/') || 
    pathname.startsWith('/instructor/') || 
    pathname.startsWith('/admin/');
  
  // Ajouter une v√©rification pour les routes de contenu √©ducatif MDX
  const isEducationalContentRoute = 
    pathname.includes('/learn/modules/') || 
    pathname.includes('/courses/content/');

  // Si c'est une route prot√©g√©e, v√©rifier l'authentification
  if (isProtectedRoute || isEducationalContentRoute) {
    // Obtenir la session depuis les cookies
    const session = request.cookies.get('session')?.value;
    
    if (!session) {
      // Rediriger vers la page de connexion avec l'URL de redirection
      const redirectUrl = new URL('/auth/login', request.url);
      redirectUrl.searchParams.set('redirect', pathname);
      return NextResponse.redirect(redirectUrl);
    }
    
    // Pour les routes √©ducatives, on pourrait ajouter une v√©rification
    // suppl√©mentaire pour s'assurer que l'√©tudiant est inscrit au cours
    if (isEducationalContentRoute) {
      // Logique de v√©rification d'inscription au module/cours sp√©cifique
      // √Ä impl√©menter selon votre syst√®me d'inscription
    }
  }
  
  return NextResponse.next();
}

// Configurer les routes o√π le middleware doit √™tre ex√©cut√©
export const config = {
  matcher: [
    '/student/:path*',
    '/instructor/:path*',
    '/admin/:path*',
    '/learn/modules/:path*',
    '/courses/content/:path*',
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
